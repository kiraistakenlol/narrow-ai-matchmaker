sequenceDiagram
    participant Client as Client Interface (with VAD)
    participant WS_Server as WebSocket Server (Backend)
    participant StateMgr as Conversation State Manager
    participant StreamingSTT as Streaming STT Service
    participant LLM as LLM Service (Streaming)
    participant StreamingTTS as Streaming TTS Service
    participant RDS as RDS Database
    participant Qdrant as Qdrant Cloud

    Client->>+WS_Server: 1. Establish WebSocket Connection
    WS_Server-->>-Client: Connection Ack

    loop Until Profile is Good Enough
        WS_Server->>+StateMgr: Get Current Profile State
        StateMgr-->>-WS_Server: Profile Data
        WS_Server->>WS_Server: Determine Next Info Needed (e.g., "Goals")
        WS_Server->>WS_Server: Generate Prompt Text (e.g., "Tell me about your goals...")

        WS_Server->>+StreamingTTS: 2. Request TTS stream for prompt
        StreamingTTS-->>-WS_Server: 3. Stream TTS Audio Chunks
        WS_Server-->>Client: 4. Stream TTS Audio Chunks
        activate Client
        Note over Client: Plays AI audio prompt
        Note over Client: Starts VAD listening
        deactivate Client

        alt User Starts Speaking (VAD Detects)
            activate Client
            Client->>Client: Stop playing any AI audio
            loop User Speaking
                 Client->>WS_Server: 5. Stream User Audio Chunks
                 WS_Server->>+StreamingSTT: 6. Forward Audio Chunks
                 StreamingSTT-->>WS_Server: 7. (Optional) Interim Transcript Chunks
                 WS_Server-->>Client: (Optional) Display Interim Transcript
            end
            Note over Client: VAD detects end of speech
            Client->>WS_Server: 8. Signal End of User Speech
            deactivate Client

            WS_Server->>StreamingSTT: Request Final Transcript
            StreamingSTT-->>-WS_Server: 9. Final Transcript

            WS_Server->>+StateMgr: Get Current Profile State
            StateMgr-->>-WS_Server: Profile Data
            WS_Server->>+LLM: 10. Parse Transcript (provide schema + current profile)
            LLM-->>-WS_Server: 11. Updated Profile Fragments
            WS_Server->>+StateMgr: 12. Update Profile State
            StateMgr-->>-WS_Server: State Update Ack
            WS_Server->>+RDS: 13. Persist Updated Profile Fragments
            RDS-->>-WS_Server: DB Confirm
        else Timeout / No Speech
            Note over WS_Server, Client: Handle timeout - maybe repeat prompt?
        end

        WS_Server->>+StateMgr: Get Updated Profile State
        StateMgr-->>-WS_Server: Profile Data
        WS_Server->>WS_Server: Check if Profile is "Good Enough"

        alt Profile Not Good Enough
             Note over WS_Server: Continue Loop
        else Profile Good Enough
             WS_Server->>+LLM: Generate Final Embedding
             LLM-->>-WS_Server: Embedding
             WS_Server->>+Qdrant: Upsert Final Embedding
             Qdrant-->>-WS_Server: Qdrant Confirm

             WS_Server->>+StreamingTTS: Generate "Profile Complete" Message
             StreamingTTS-->>-WS_Server: Stream TTS Audio Chunks
             WS_Server-->>Client: Stream TTS Audio Chunks
             WS_Server-->>Client: Send Close Connection Signal
             Note over WS_Server: Ending Conversation Loop
        end
    end