sequenceDiagram
    title Onboarding Flow (Revised Session Creation)

    participant Human
    participant Client as Client Interface
    participant API as AWS API Gateway
    participant OnboardingSvc as Onboarding Service (Backend)
    participant AuthenticationSvc as Authentication Service (Backend)
    participant UserService as User Service (Backend)
    participant ProfileSvc as Profile Service (Backend)
    participant EventSvc as Event Service (Backend)
    participant MatchService as Match Service (Backend)
    participant ContentExtractionSvc as Content Extraction Service (Backend)
    participant LlmService as LlmService (Backend)
    participant S3 as AWS S3 Bucket
    participant STT as AWS Transcribe (STT)
    # participant LLM as External LLM Provider # Removed for simplicity
    participant RDS as AWS RDS Database
    # participant Qdrant as Qdrant Cloud # Assuming Qdrant is used internally by Match/Profile/Event svcs, not directly here
    participant AuthSvc as AWS Cognito

    Human->>Client: Click 'Record Introduction' for Event X
    activate Client
    Note right of Client: Starts audio recording locally
    Client->>API: POST /onboarding/initiate (Body: event_id) # Context removed
    activate API
    API->>OnboardingSvc: Initiate Onboarding (event_id)
    activate OnboardingSvc

    # --- Create Linked Entities FIRST --- #
    OnboardingSvc->>UserService: Create Unauthenticated User
    activate UserService
    Note over UserService: Generate internal user_id (UUID)
    UserService->>RDS: INSERT INTO User (user_id=internal_uuid, external_id=NULL)
    RDS-->>UserService: internal_user_id
    UserService-->>OnboardingSvc: internal_user_id
    deactivate UserService

    OnboardingSvc->>ProfileSvc: Create Initial Profile (user_id=internal_user_id)
    activate ProfileSvc
    ProfileSvc->>RDS: INSERT INTO Profile (user_id=...)
    RDS-->>ProfileSvc: profile_id
    ProfileSvc-->>OnboardingSvc: profile_id
    deactivate ProfileSvc

    OnboardingSvc->>EventSvc: Create Initial Participation (user_id=internal_user_id, event_id)
    activate EventSvc
    EventSvc->>RDS: INSERT INTO EventParticipation (user_id=..., event_id=...)
    RDS-->>EventSvc: participation_id
    EventSvc-->>OnboardingSvc: participation_id
    deactivate EventSvc

    # --- Create Onboarding Session AFTER getting IDs --- #
    OnboardingSvc->>RDS: Create OnboardingSession (event_id, user_id=internal_user_id, profile_id=..., participation_id=..., status=AWAITING_AUDIO)
    RDS-->>OnboardingSvc: onboarding_id
    # Removed subsequent update step

    # --- Pre-signed URL Generation --- #
    Note over OnboardingSvc: Generates S3 key based on onboarding_id (e.g., 'onboarding/{id}/audio.wav')
    OnboardingSvc->>API: Return Onboarding ID & Pre-signed URL details
    API-->>Client: 201 Created {onboarding_id, upload_url, s3_key}
    deactivate API
    deactivate OnboardingSvc # Deactivate OnboardingSvc *after* API interaction complete

    # --- Client receives URL, Uploads Recorded Audio --- #
    Note right of Client: Recording finishes (if not already), gets upload_url
    Client->>S3: PUT {upload_url} (Recorded Audio Data)
    S3-->>Client: Upload OK
    Client-->>Human: Show Upload Complete / In Progress

    # --- Notify Upload & Synchronous Backend Processing --- #
    Note right of Client: Automatically notifies backend after successful S3 upload
    Client->>API: POST /onboarding/{onboarding_id}/notify-upload (Body: s3_key)
    deactivate Client
    activate API
    API->>OnboardingSvc: Notify Upload & Process (onboarding_id, s3_key)
    activate OnboardingSvc

    OnboardingSvc->>RDS: Get OnboardingSession (for user_id, event_id, profile_id, participation_id)
    RDS-->>OnboardingSvc: session(...)

    Note right of OnboardingSvc: Processing starts asynchronously
    OnboardingSvc->>RDS: Update OnboardingSession (status: PROCESSING)
    RDS-->>OnboardingSvc: OK

    # --- Transcription --- #
    OnboardingSvc->>STT: startTranscriptionJob(s3_key)
    activate STT
    Note right of OnboardingSvc: Polls/waits for transcription job
    STT-->>OnboardingSvc: { jobId }
    OnboardingSvc->>STT: getTranscriptionResult(jobId)
    STT-->>OnboardingSvc: { transcriptText }
    deactivate STT

    # --- Profile Update via Text --- #
    OnboardingSvc->>ProfileSvc: processProfileUpdate(user_id, transcriptText)
    activate ProfileSvc
    ProfileSvc->>ContentExtractionSvc: extractStructuredData(transcriptText, profileSchema, profileInstructions)
    activate ContentExtractionSvc
    # ContentExtractionSvc internally calls LlmService
    ContentExtractionSvc->>LlmService: extractStructuredData(...)
    activate LlmService
    LlmService-->>ContentExtractionSvc: { extractedProfileData }
    deactivate LlmService
    ContentExtractionSvc-->>ProfileSvc: { extractedProfileData }
    deactivate ContentExtractionSvc
    ProfileSvc->>RDS: Update Profile (data = extractedProfileData)
    RDS-->>ProfileSvc: Updated Profile
    ProfileSvc-->>OnboardingSvc: Updated Profile
    deactivate ProfileSvc

    # --- Event Participation Update via Text --- #
    OnboardingSvc->>EventSvc: processParticipationUpdate(user_id, event_id, transcriptText)
    activate EventSvc
    EventSvc->>ContentExtractionSvc: extractStructuredData(transcriptText, eventSchema, eventInstructions)
    activate ContentExtractionSvc
    # ContentExtractionSvc internally calls LlmService
    ContentExtractionSvc->>LlmService: extractStructuredData(...)
    activate LlmService
    LlmService-->>ContentExtractionSvc: { extractedEventData }
    deactivate LlmService
    ContentExtractionSvc-->>EventSvc: { extractedEventData }
    deactivate ContentExtractionSvc
    EventSvc->>RDS: Update EventParticipation (contextData = extractedEventData)
    RDS-->>EventSvc: Updated Participation
    EventSvc-->>OnboardingSvc: Updated Participation
    deactivate EventSvc

    # --- Update Overall Onboarding Status --- #
    Note right of OnboardingSvc: Calculate completeness based on updated Profile and Participation
    OnboardingSvc->>RDS: Update OnboardingSession (status: COMPLETED or other)
    RDS-->>OnboardingSvc: OK

    # --- Return Final Status to Client --- #
    OnboardingSvc-->>API: Final Onboarding Status Response {status}
    deactivate OnboardingSvc
    API-->>Client: 200 OK {OnboardingStatusResponse}
    Client-->>Human: Show Final Status
    activate Client
    deactivate API

    loop Until Onboarding Complete or Ready for Review

        # --- Status Polling (If needed, e.g., initial processing failed or took too long) --- #
        # ... Polling loop can remain similar, but primarily for recovery or long waits ...
        # ... It fetches status, which should reflect the final status set by the synchronous notify flow ...

        # --- Decide Next Step based on Status --- #
        alt Status requires more info (e.g., NEEDS_EVENT_CONTEXT)
            # --- Subsequent Upload Flow (remains similar) --- #
            Note over Human: Onboarding needs event context, prompting for upload.
            Human->>Client: Request Audio Upload URL (context = 'event')
            # ... Request URL -> Upload -> Notify (which triggers synchronous processing again) ...
            Client->>API: POST /onboarding/{onboarding_id}/notify-upload (Body: s3_key, context='event')
            # ... This notify call would block and return the *new* final status ...
            API-->>Client: 200 OK {OnboardingStatusResponse} # Returns final status after processing event audio
            Client-->>Human: Show Updated Status
        else Status is READY_FOR_REVIEW or COMPLETED
             Note over Human: Status is ready or complete. Loop will terminate.
        else # Handle other unexpected statuses
             Note over Human: Unexpected status received.
        end
    end

    Note over Human: Onboarding Ready for Review or Complete!

    # --- Review and Auth Flow remains the same --- #
    Human->>Client: Request Profile Review
    Client->>API: GET /onboarding/{onboarding_id}/profile
    # ... review flow ...
    API-->>Client: 200 OK {OnboardingReviewData}
    Client-->>Human: Display combined data for review

    # --- Authentication and Finalization Flow --- #
    Human->>Client: Initiate Sign Up / Log In (Agrees with Profile)
    Client->>AuthSvc: Initiate Sign Up Flow (pass onboarding_id in state)
    Note over Human, AuthSvc: User authenticates externally
    AuthSvc-->>Client: Redirect to Client Callback URL with Auth Code & state(onboarding_id)
    # Client receives redirect
    activate Client
    Note right of Client: Extracts code and state (onboarding_id)
    Client->>API: POST /auth/callback (Body: code, state)
    deactivate Client
    activate API

    # API routes callback to Authentication Service
    API->>AuthenticationSvc: Process Callback (Auth Code, state)
    deactivate API
    activate AuthenticationSvc
    Note over AuthenticationSvc: Extracts onboarding_id from state

    # Authentication Service handles token exchange
    AuthenticationSvc->>AuthSvc: Exchange Code for Tokens (Server-to-Server)
    activate AuthSvc
    AuthSvc-->>AuthenticationSvc: ID Token (contains external_id=sub, email), Access/Refresh Tokens
    deactivate AuthSvc

    Note over AuthenticationSvc: Verify ID Token, Extract external_id (sub), email. Stores Tokens.

    # Authentication Service asks OnboardingService to finalize
    AuthenticationSvc->>OnboardingSvc: Finalize Onboarding (onboarding_id, external_id, email)
    activate OnboardingSvc

    # OnboardingService gets the internal user_id
    OnboardingSvc->>RDS: Fetch OnboardingSession (onboarding_id)
    RDS-->>OnboardingSvc: session(user_id, event_id)

    # OnboardingService tells UserService to update the specific User record
    OnboardingSvc->>UserService: Update User Auth Details (user_id, external_id, email)
    activate UserService
    UserService->>RDS: Update User SET external_id=..., email=... WHERE user_id=X
    activate RDS
    RDS-->>UserService: User Record Updated
    deactivate RDS
    UserService-->>OnboardingSvc: User Auth Updated OK
    deactivate UserService

    # OnboardingService marks the session as complete
    OnboardingSvc->>RDS: Update OnboardingSession SET status=COMPLETED WHERE onboarding_id=X

    # --- Trigger Initial Matching --- #
    OnboardingSvc->>MatchService: TriggerInitialMatching(user_id, event_id)
    activate MatchService
    Note right of MatchService: Starts async match calculation
    MatchService-->>OnboardingSvc: Matching Triggered OK
    deactivate MatchService
    # --- End Trigger --- #

    OnboardingSvc-->>AuthenticationSvc: Onboarding Finalized OK
    deactivate OnboardingSvc

    # Authentication Service returns success and tokens to client
    Note over AuthenticationSvc: Prepares response with auth tokens
    AuthenticationSvc-->>Client: Login Success / Redirect to App (Returns Auth Tokens)
    Client-->>Human: Logged In Successfully
    deactivate AuthenticationSvc