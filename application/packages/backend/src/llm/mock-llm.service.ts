import { Injectable, Logger } from '@nestjs/common';
import { ILlmService, LlmStructuredDataResult } from './llm.interface';
import { ProfileData } from '@narrow-ai-matchmaker/common'; // Import the type

// Helper function to create a default empty ProfileData (can be shared)
const createDefaultProfileData = (): ProfileData => ({
    raw_input: 'mock input text', // Add some mock data
    personal: {
        name: 'Mock User',
        headline: 'Mock Headline',
        visiting_status: 'Looking for teammates',
    },
    skills: {
        hard: [{ skill: 'TypeScript', level: 'Intermediate' }],
        soft: [{ skill: 'Communication', level: 'Advanced' }],
    },
    industries: ['Software Development'],
    hobbies: ['Mock Hobby'],
    roles: [], // Keep roles empty for simplicity
    event_context: {
        event_id: 'mock_event',
        goals: {
            looking_for: ['Collaboration'],
            offering: ['NestJS expertise'],
        },
    },
    extra_notes: 'This is mock data generated by MockLlmService.',
});

@Injectable()
export class MockLlmService implements ILlmService {
    private readonly logger = new Logger(MockLlmService.name);

    constructor() {
        this.logger.log('MockLlmService initialized');
    }

    async extractStructuredData(
        text: string,
        _targetSchema: object, // Prefixed as unused
        instructions: string
    ): Promise<LlmStructuredDataResult> {
        this.logger.warn(
            `Mock extractStructuredData called. Returning fixed placeholder ProfileData. Instructions: "${instructions}", Text length: ${text.length}`
        );

        // Return a fixed, valid ProfileData structure
        const placeholderData = createDefaultProfileData();

        // Optionally, slightly customize based on input for basic testing
        if (text.toLowerCase().includes('python')) {
             placeholderData.skills.hard.push({ skill: 'Python', level: 'Beginner' });
        }
        placeholderData.raw_input = text.substring(0, 100); // Store snippet of input

        return {
            extractedData: placeholderData,
            modelUsed: 'mock-llm-v0.2',
        };
    }
} 