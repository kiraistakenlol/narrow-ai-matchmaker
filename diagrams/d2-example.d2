# Narrow AI Matchmaker System Architecture
direction: right

# Primary containers with distinct styling
Frontend Layer: {
  style: {
    fill: "#f5f5f5"
    stroke: "#333"
    stroke-width: 2
    stroke-dash: 0
    border-radius: 10
    shadow: true
  }
  
  User: {
    shape: person
    style: {
      fill: "#e6e6e6"
      stroke: "#333"
      stroke-width: 2
      font-size: 18
      font-color: "#333"
    }
    tooltip: "End users of the platform"
  }
  
  UI: {
    shape: rectangle
    style: {
      fill: "#d5e8d4"
      stroke: "#82b366"
      stroke-width: 1
    }
    label: "Web Interface"
  }
  
  Mobile: {
    shape: rectangle
    style: {
      fill: "#d5e8d4"
      stroke: "#82b366"
      stroke-width: 1
    }
    label: "Mobile App"
  }
  
  # Inner connections
  User -> UI: {
    style: {
      stroke: "#333"
      stroke-width: 1
    }
  }
  User -> Mobile
}

Backend Services: {
  style: {
    fill: "#dae8fc"
    stroke: "#6c8ebf"
    stroke-width: 2
    border-radius: 10
    shadow: true
  }
  
  API Gateway: {
    shape: hexagon
    style: {
      fill: "#dae8fc"
      stroke: "#6c8ebf"
      stroke-width: 2
    }
    tooltip: "Routes all external requests to appropriate services"
  }
  
  Services: {
    direction: down
    
    Profile Service: {
      shape: rectangle
      style: {
        fill: "#dae8fc" 
        stroke: "#6c8ebf"
      }
    }
    
    Matching Engine: {
      shape: rectangle
      style: {
        fill: "#d5e8d4"
        stroke: "#82b366"
      }
      
      # Nested components
      Embedding: {
        shape: rectangle
        style: { fill: "#f8cecc" }
        label: "Embedding\nComponent"
      }
      
      Algorithm: {
        shape: rectangle
        style: { fill: "#f8cecc" }
        label: "Matching\nAlgorithm" 
      }
      
      Filtering: {
        shape: rectangle
        style: { fill: "#f8cecc" }
        label: "Filter\nComponent"
      }
      
      # Show sequence with numbered connections
      Embedding -> Algorithm: 1
      Algorithm -> Filtering: 2
    }
    
    Analytics Service: {
      shape: hexagon
      style: {
        fill: "#ffe6cc"
        stroke: "#d79b00"
      }
      label: "Analytics\nService"
    }
    
    Notification System: {
      shape: parallelogram
      style: {
        fill: "#e1d5e7"
        stroke: "#9673a6"
      }
    }
  }
}

Data Layer: {
  style: {
    fill: "#fff2cc"
    stroke: "#d6b656" 
    stroke-width: 2
    border-radius: 10
    shadow: true
  }
  
  Vector DB: {
    shape: cylinder
    style: {
      fill: "#fff2cc"
      stroke: "#d6b656"
    }
    label: "Vector\nDatabase"
  }
  
  Document DB: {
    shape: cylinder
    style: {
      fill: "#fff2cc"
      stroke: "#d6b656"
    }
    label: "Document\nDatabase"
  }
  
  Analytics DB: {
    shape: cylinder
    style: {
      fill: "#fff2cc"
      stroke: "#d6b656"
    }
    label: "Analytics\nDatabase"
  }
}

# Connection types between containers
Frontend Layer.UI -> Backend Services.API Gateway: "API Requests" {
  style: {
    stroke: "#82b366"
    stroke-width: 2
  }
}

Frontend Layer.Mobile -> Backend Services.API Gateway: "API Requests" {
  style: {
    stroke: "#82b366"
    stroke-width: 2
  }
}

# Different arrow styles
Backend Services.API Gateway -> Backend Services.Services.Profile Service: {
  style: {
    stroke-dash: 5
  }
}

Backend Services.API Gateway -> Backend Services.Services.Matching Engine: {
  style: {
    stroke: "#6c8ebf"
    stroke-width: 2
  }
}

Backend Services.API Gateway -> Backend Services.Services.Notification System: {
  style: {
    stroke: "#9673a6"
  }
}

# Data flow with double-ended arrows
Backend Services.Services.Profile Service <-> Data Layer.Document DB: "Store/Retrieve"

# One-to-many relationship
Backend Services.Services.Matching Engine -> Data Layer.Vector DB: "Query Embeddings" {
  style: {
    stroke: "#82b366"
    stroke-width: 2
  }
}

# Dashed connections for analytics
Backend Services.Services.Matching Engine .-> Backend Services.Services.Analytics Service: "Log Events" {
  style: {
    stroke-dash: 3
  }
}

Backend Services.Services.Analytics Service -> Data Layer.Analytics DB: {
  style: {
    stroke: "#d79b00"
  }
}

# Feedback loops
Data Layer.Vector DB -> Backend Services.Services.Matching Engine: "Return Matches"
Backend Services.Services.Matching Engine -> Backend Services.API Gateway: "Results"
Backend Services.API Gateway -> Frontend Layer.UI: "Display"

# Text labels and explanations
SystemFlow: |md
  ## System Flow
  1. Users interact with frontend interfaces
  2. API Gateway routes requests to services
  3. Matching Engine finds connections using vector similarity
  4. Results flow back to users through the Gateway
|

# Place explanation in a fixed position
SystemFlow.style: {
  fill: "#f5f5f5"
  stroke: "#333"
  stroke-width: 1
  border-radius: 5
}

classes: {
  important: {
    style: {
      stroke: "red"
      stroke-width: 3
      border-radius: 0
    }
  }
}

# Apply style class
Backend Services.Services.Matching Engine.class: important 